name: Deploy Gauge to EKS QA

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    environment:
      name: qa
    if: github.repository_owner == 'EFM-Digital'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Grant Execute Permission to Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload Gauge's Lambda Function Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-gauge-zip
          path: ./gauge/build/libs/gauge-0.0.1-SNAPSHOT-aws.jar

  deploy: 
    name: Deploy to QA Environment
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: qa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Gauge's Lambda Function Artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-gauge-zip
          path: ./gauge/build/libs

      - name: Install Helm
        run: |
          curl -sSL https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz -o helm.tar.gz
          tar -zxvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm repo add stable https://charts.helm.sh/stable
          helm repo update

      - name: Log commit ID
        run: echo "Commit Id = ${{ github.sha }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init and Apply
        run: |
          cd tf-eks-deployment
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          echo Logging in to Amazon ECR...
          aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/enterprise-api-qa:${{ github.sha }} .
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/enterprise-api-qa:${{ github.sha }}

      - name: Set up AWS EKS configuration
        run: aws eks update-kubeconfig --name element-digital-qa-cluster --region ${{ vars.AWS_DEFAULT_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create namespace if doesn't exist
        run: |
          kubectl get namespace enterprise-apis || kubectl create namespace enterprise-apis

      # - name: Deploy using Helm
      #   run: |
      #     helm upgrade -f helm/enterprise-api/values-gauge-qa.yaml --set image.tag=${{ github.sha }} --install gauge-mutation helm/enterprise-api --namespace enterprise-apis --debug --wait --timeout=4m
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
